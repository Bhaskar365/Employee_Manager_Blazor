@page "/test";
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet
@using Employee_Manager_Models
@inject HttpClient http;

<h3>Test</h3>

<input type="file" @onchange="new EventCallback<ChangeEventArgs>(this, HandleFileUpload)" />

@code 
{
    public class ApiData
    {
        public List<Column> Columns { get; set; }
        public List<RowData> Rows { get; set; }
    }

    public class Column
    {
        public string ColumnName { get; set; }
    }

    public class RowData
    {
        public List<object> Values { get; set; }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Parse the uploaded Excel file
            var excelData = await ParseExcelFile(file);

            // Upload the data to the database
            await UploadDataToDatabase(excelData);
        }
    }

    private async Task<ApiData> ParseExcelFile(IBrowserFile file)
    {
        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);

            using (SpreadsheetDocument document = SpreadsheetDocument.Open(memoryStream, false))
            {
                var apiData = new ApiData();
                apiData.Columns = new List<Column>();
                apiData.Rows = new List<RowData>();

                // Access the workbook and worksheet
                WorkbookPart workbookPart = document.WorkbookPart;
                WorksheetPart worksheetPart = workbookPart.WorksheetParts.First();
                SheetData sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();

                // Extract column names from the header row
                Row headerRow = sheetData.Elements<Row>().First();
                foreach (Cell cell in headerRow.Elements<Cell>())
                {
                    string columnName = GetCellValue(document, cell);
                    apiData.Columns.Add(new Column { ColumnName = columnName });
                }

                // Extract data rows
                foreach (Row row in sheetData.Elements<Row>().Skip(1)) // Skip the header row
                {
                    var rowData = new RowData();
                    rowData.Values = new List<object>();

                    foreach (Cell cell in row.Elements<Cell>())
                    {
                        string cellValue = GetCellValue(document, cell);
                        rowData.Values.Add(cellValue);
                    }

                    apiData.Rows.Add(rowData);
                }

                return apiData;
            }
        }

        return null; // Replace this with the actual parsed data
    }

    private string GetCellValue(SpreadsheetDocument document, Cell cell)
    {
        SharedStringTablePart stringTablePart = document.WorkbookPart.SharedStringTablePart;
        string value = cell.InnerText;

        if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
        {
            return stringTablePart.SharedStringTable.ChildElements[int.Parse(value)].InnerText;
        }
        else
        {
            return value;
        }
    }

    private async Task UploadDataToDatabase(ApiData excelData)
    {
        // Upload the data to the database using your backend service
        // For example:
        // await frontendService.UploadExcelData(excelData);
    }
}