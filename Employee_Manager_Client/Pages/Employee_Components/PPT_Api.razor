@* @page "/pptapi"
@using System.Net.Http
@using System.Net.Http.Json
@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Drawing;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Presentation;
@using D = DocumentFormat.OpenXml.Drawing;
@using Employee_Manager_Client.Services
@using P = DocumentFormat.OpenXml.Presentation;
@using Employee_Manager_Models
@inject IFrontendUserPanelService frontendService;

<h3>PPT_Api</h3>

<button @onclick="Click"></button>

@code {

    // public class ApiData
    // {
    //     public string Title { get; set; }
    //     public string Content { get; set; }
    // }

    private List<Employee> employees = new List<Employee>();

    private HttpClient httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        employees = await frontendService.GetEmployees();
    }

    public async Task Click()
    {
        // Fetch data from the API
        var apiData = employees;

        // Create and update the presentation with the API data
        CreatePresentation(apiData);
    }

    static void CreatePresentation(List<Employee> apiData)
    {
        // Create a presentation at a specified file path
        string filepath = "example.pptx";
        using (PresentationDocument presentationDoc = PresentationDocument.Create(filepath, PresentationDocumentType.Presentation))
        {
            PresentationPart presentationPart = presentationDoc.AddPresentationPart();
            presentationPart.Presentation = new Presentation();

            // Create slide and update content with API data
            foreach (var x in apiData) {
                SlidePart slidePart = CreateSlidePart(presentationPart, x.FirstName, x.LastName, x.Email, x.Department.DepartmentName);
            }

            // Dispose the presentation handle
            presentationDoc.Dispose();
        }
    }

    static SlidePart CreateSlidePart(PresentationPart presentationPart, string firstname, string lastname, string email, string depName)
    {
        SlidePart slidePart = presentationPart.AddNewPart<SlidePart>();

        Slide slide = new Slide(
            new CommonSlideData(
                new ShapeTree(
                    new P.NonVisualGroupShapeProperties(
                        new P.NonVisualDrawingProperties() { Id = (UInt32Value)1U, Name = "" },
                        new P.NonVisualGroupShapeDrawingProperties(),
                        new ApplicationNonVisualDrawingProperties()),
                    new GroupShapeProperties(new TransformGroup()),
                    new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)2U, Name = "First Name" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(firstname))))),
                    new GroupShapeProperties(new TransformGroup()),
                     new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)2U, Name = "Last Name" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(lastname))))),
                                new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)2U, Name = "Email" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(email))))),
                    new GroupShapeProperties(new TransformGroup()),
                    new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)3U, Name = "Department" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape() { Type = PlaceholderValues.Body })),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(depName))))))),
            new ColorMapOverride(new MasterColorMapping()));

        slidePart.Slide = slide;

        return slidePart;
    }
}

}
 

@page "/pptapi"
@using System.Net.Http
@using System.Net.Http.Json
@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Drawing;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Presentation;
@using D = DocumentFormat.OpenXml.Drawing;
@using Employee_Manager_Client.Services
@using P = DocumentFormat.OpenXml.Presentation;
@using Employee_Manager_Models
@inject IFrontendUserPanelService frontendService;


@inject IFrontendUserPanelService frontendService;

<h3>PPT_Api</h3>

<button @onclick="Click">Generate PowerPoint Presentation</button>

@code {

    private List<Employee> employees = new List<Employee>();

    private HttpClient httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        employees = await frontendService.GetEmployees();
    }

    public async Task Click()
    {
        // Fetch data from the API
        var apiData = employees;

        // Create and update the presentation with the API data
        CreatePresentation(apiData);
    }

    static void CreatePresentation(List<Employee> apiData)
    {
        // Create a presentation at a specified file path
        string filepath = "example.pptx";
        using (PresentationDocument presentationDoc = PresentationDocument.Create(filepath, PresentationDocumentType.Presentation))
        {
            PresentationPart presentationPart = presentationDoc.AddPresentationPart();
            presentationPart.Presentation = new Presentation();

            // Add a slide to the presentation for each employee
            foreach (var employee in apiData)
            {
                SlidePart slidePart = CreateSlidePart(presentationPart, employee.FirstName, employee.LastName, employee.Email, employee.Department.DepartmentName);

                // Add the slide part to the presentation
                presentationPart.AddPart(slidePart);
            }

            // Dispose the presentation handle
        }
    }

    static SlidePart CreateSlidePart(PresentationPart presentationPart, string firstname, string lastname, string email, string depName)
    {
        SlidePart slidePart = presentationPart.AddNewPart<SlidePart>();

        Slide slide = new Slide(
            new CommonSlideData(
                new ShapeTree(
                    new P.NonVisualGroupShapeProperties(
                        new P.NonVisualDrawingProperties() { Id = (UInt32Value)1U, Name = "" },
                        new P.NonVisualGroupShapeDrawingProperties(),
                        new ApplicationNonVisualDrawingProperties()),
                    new GroupShapeProperties(new TransformGroup()),
                    new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)2U, Name = "First Name" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(firstname))))),
                    new GroupShapeProperties(new TransformGroup()),
                     new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)2U, Name = "Last Name" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(lastname))))),
                                new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)2U, Name = "Email" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape())),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(email))))),
                    new GroupShapeProperties(new TransformGroup()),
                    new P.Shape(
                        new P.NonVisualShapeProperties(
                            new P.NonVisualDrawingProperties() { Id = (UInt32Value)3U, Name = "Department" },
                            new P.NonVisualShapeDrawingProperties(new ShapeLocks() { NoGrouping = true }),
                            new ApplicationNonVisualDrawingProperties(new PlaceholderShape() { Type = PlaceholderValues.Body })),
                        new P.ShapeProperties(),
                        new P.TextBody(
                            new BodyProperties(),
                            new ListStyle(),
                            new Paragraph(
                                new EndParagraphRunProperties() { Language = "en-US" },
                                new Run(new DocumentFormat.OpenXml.Drawing.Text(depName))))))),
            new ColorMapOverride(new MasterColorMapping()));

        slidePart.Slide = slide;

        return slidePart;
    }
}
*@

@page "/export-to-ppt"
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Presentation;
@using DocumentFormat.OpenXml.Drawing;
@using System.IO;
@using Employee_Manager_Client.Services
@using Employee_Manager_Models
@using Newtonsoft.Json;
@using System.Net.Http;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@inject IFrontendUserPanelService frontendService;

<h3>Export Employees to PowerPoint</h3>

<button @onclick="ExportToPPT">Export to PowerPoint</button>

@code {

    private List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        employees = await frontendService.GetEmployees();
    }

    private async Task ExportToPPT()
    {
      

        // Generate PowerPoint
        var pptFileName = "EmployeeDetails.pptx";
        using (PresentationDocument presentationDocument = PresentationDocument.Create(pptFileName, PresentationDocumentType.Presentation))
        {
            // Add a new presentation part
            PresentationPart presentationPart = presentationDocument.AddPresentationPart();
            presentationPart.Presentation = new Presentation();

            // Add a slide to the presentation
            SlidePart slidePart = presentationPart.AddNewSlidePart();
            slidePart.Slide = new Slide(new CommonSlideData(new ShapeTree()));

            // Add title to the first slide
            slidePart.Slide.CommonSlideData.ShapeTree.AppendChild(
                new CommonSlideDataExtensionList(
                    new CommonSlideDataExtension { Uri = "{BB962C8B-B14F-4D97-AF65-F5344CB8AC3E}" })
            );
            slidePart.Slide.CommonSlideData.ShapeTree.AppendChild(
                new NonVisualGroupShapeProperties(
                    new NonVisualDrawingProperties { Id = (UInt32Value)1U, Name = "Title Placeholder" },
                    new NonVisualGroupShapeDrawingProperties(),
                    new ApplicationNonVisualDrawingProperties()
                )
            );
            slidePart.Slide.CommonSlideData.ShapeTree.AppendChild(
                new Shape(
                    new NonVisualShapeProperties(
                        new NonVisualDrawingProperties { Id = (UInt32Value)2U, Name = "Title 1" },
                        new NonVisualShapeDrawingProperties(new ShapeLocks { NoGrouping = true }),
                        new ApplicationNonVisualDrawingProperties(new PlaceholderShape { Type = PlaceholderValues.Title })
                    ),
                    new ShapeProperties(),
                    new TextBody(
                        new Paragraph(new EndParagraphRunProperties(new Run(new Text("Employee Details")))))));

            // Add slides for each employee
            foreach (var employee in employees)
            {
                var newSlidePart = presentationPart.AddNewPart<SlidePart>();
                Slide slide = new Slide(new CommonSlideData(new ShapeTree()));
                newSlidePart.Slide = slide;
                slide.CommonSlideData.ShapeTree.AppendChild(new TextBody(new Paragraph(new Run(new Text(employee.FirstName)))));
                slide.CommonSlideData.ShapeTree.AppendChild(new TextBody(new Paragraph(new Run(new Text(employee.LastName)))));
                slide.CommonSlideData.ShapeTree.AppendChild(new TextBody(new Paragraph(new Run(new Text(employee.Email)))));
                // Add other employee details as needed
            }

            // Save the presentation
            presentationPart.Presentation.Save();
        }
    }
}
