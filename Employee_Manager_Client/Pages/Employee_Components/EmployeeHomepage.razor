@page "/";
@using ClosedXML.Excel
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Presentation
@using DocumentFormat.OpenXml.Spreadsheet
@using DocumentFormat.OpenXml.Wordprocessing
@using Employee_Manager_Client.Services
@using Employee_Manager_Models
@using System.Data

@inject IFrontendUserPanelService frontendService;
@inject HttpClient http;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime;

<button class="btn btn-warning" @onclick="ExportToExcel">Export</button>
<button @onclick="DownloadDocument">Download Document</button>
<button @onclick="ExportToPPT">PPT Export</button>

<div class="body">
    <div class="headersTitle">
        <h3 id="employeeHeader" class="card-title text-primary">Employee Details</h3>
        <hr />
        <div class="headers">
            <div class="addBox">
                <div class="btn btn-primary" id="addBtn">
                    <a href="/employee/add" role="button" style="text-decoration:none;color:white">
                        <i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Add
                    </a>
                </div>

                <div class="search">
                    <strong>Search&nbsp;</strong><input class="inputBox"
                                                        @bind="Query" @bind:event="oninput" @onkeyup="FilterUser" />
                </div>
            </div>
        </div>
    </div>
    <div>
        @if (isLoading)
        {
            <div class="loaderBox">
                <div class="lds-facebook">
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </div>

        }
        else if (showNoDataMessage)
        {
            <p id="noData">No data available....</p>
        }
        else
        {
            <div class="mainBody">
                @foreach (var e in employeeAfterFiltered)
                {
                    <div class="card">
                        <div class="card-header">
                            <span>@e.FirstName @e.LastName</span>
                            <a href="@($"edit/{e.EmpId}")" id="editIcon">
                                <i class="fa fa-pencil" aria-hidden="true"></i>
                            </a>
                        </div>
                        <div class="card-body">
                            <img src="/user.png" class="card-img-top" alt="img">
                            <div class="employeeDetails">
                                <span>Department : <strong>@e.Department.DepartmentName</strong></span>
                                <span>Country : <strong>@e.Address.Country</strong></span>
                            </div>
                        </div>
                        <div class="footerClass">
                            <a href="@($"employee/{e.EmpId}")" class="card-link btn btn-primary" id="viewBtn">View</a>
                            <button class="card-link btn btn-danger" data-bs-toggle="modal" data-bs-target="#exampleModal"
                                    id="deleteBtn" @onclick="@(()=>showDeleteAlert(e.EmpId))">
                                Delete
                            </button>
                        </div>
                    </div>
                }
            </div>

            <!-------------- Modal ------------------->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Do you want to delete product with <strong>ID : @EmpId</strong> permanently?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-danger" @onclick="(()=>Delete(true))">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="pagination">
        <div class="itemPerPage">Items Per Page</div>
        <div class="selectOption">
            <select @onchange="UpdatePageSize" class="form-select form-select-sm" aria-label="Small select example">
                <option value="4">4</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
        <button type="button" class="btn btn-dark" disabled="@IsFirstPage" @onclick="PreviousPage">Previous</button>
        <span class="btn btn-light" id="totalPage">Page @currentPage of @totalPages</span>
        <button type="button" class="btn btn-dark" disabled="@IsLastPage" @onclick="NextPage">Next</button>
    </div>
</div>

@code
{

    [CascadingParameter]
    public EventCallback notify { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
    private List<Employee> employees = new List<Employee>();

    private List<Employee> employeeAfterFiltered = new List<Employee>();

    private int pageSize = 4;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)employees.Count / pageSize);
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    public bool Show = false;

    public int EmpId;

    public string Name;

    protected string Query { get; set; } = string.Empty;

    private bool showNoDataMessage = false;
    private bool isLoading = true;

    private string responseMessage;
    private string productCode;

    protected override async Task OnInitializedAsync()
    {
        employees = await frontendService.GetEmployees();
        showNoDataMessage = employees == null || employees.Count == 0;
        isLoading = false;
        UpdatePagedData();
    }

    private void UpdatePagedData()
    {
        int startIndex = (currentPage - 1) * pageSize;
        employeeAfterFiltered = employees.Skip(startIndex).Take(pageSize).ToList();
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdatePagedData();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdatePagedData();
        }
    }

    private async Task UpdatePageSize(ChangeEventArgs e)
    {
        pageSize = Convert.ToInt32(e.Value);
        currentPage = 1; // Reset to first page when changing page size
        UpdatePagedData();
        await Task.CompletedTask;
    }

    private void showDeleteAlert(int id)
    {
        EmpId = id;
        Show = true;
    }

    private async Task Delete(bool value)
    {
        isLoading = true;
        await frontendService.DeleteEmp(EmpId);
        isLoading = false;
        StateHasChanged();
        navigationManager.NavigateTo("/", true);
    }

    private void GoToEditPage(int id)
    {
        EmpId = id;
        navigationManager.NavigateTo($"/user/{EmpId}");
    }

    protected async Task FilterUser()
    {
        if (!string.IsNullOrWhiteSpace(Query))
        {
            employees = employees.Where(x => x.FirstName.ToLower().Contains(Query.ToLower()) ||
             x.LastName.ToLower().Contains(Query.ToLower())
         ).ToList();

            employeeAfterFiltered = employees;
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    ///////////////////////////////////////////////////// using openxml excel export /////////////////////////////////////////////////////
    public async Task<(byte[], string)> ExportToExcelFunction()
    {
        // Call your API to fetch data
        var apiData = await FetchDataFromApi();

        // Create a memory stream to store the Excel file
        using (MemoryStream mem = new MemoryStream())
        {
            // Create a SpreadsheetDocument
            using (SpreadsheetDocument document = SpreadsheetDocument.Create(mem, SpreadsheetDocumentType.Workbook))
            {
                // Add a WorkbookPart to the document
                WorkbookPart workbookPart = document.AddWorkbookPart();
                workbookPart.Workbook = new Workbook();

                // Add a WorksheetPart to the WorkbookPart
                WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
                worksheetPart.Worksheet = new Worksheet(new SheetData());

                // Add a new sheet and get its id
                Sheets sheets = document.WorkbookPart.Workbook.AppendChild(new Sheets());
                Sheet sheet = new Sheet() { Id = document.WorkbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "Sheet1" };
                sheets.Append(sheet);

                // Get the SheetData object
                SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();

                // Add header row
                Row headerRow = new Row();
                foreach (var column in apiData.Columns)
                {
                    headerRow.AppendChild(CreateCell(column.ColumnName));
                }
                sheetData.AppendChild(headerRow);

                // Add data rows
                foreach (var row in apiData.Rows)
                {
                    Row dataRow = new Row();
                    foreach (var value in row.Values)
                    {
                        dataRow.AppendChild(CreateCell(value.ToString()));
                    }
                    sheetData.AppendChild(dataRow);
                }

                // Save changes to the spreadsheet
                workbookPart.Workbook.Save();
            }

            // Reset the memory stream position
            mem.Position = 0;

            // Get the file contents as byte array
            byte[] fileContents = mem.ToArray();

            // Return file contents along with filename
            return (fileContents, "api_data.xlsx");
        }
    }

    private async Task ExportToExcel()
    {
        var excelData = await ExportToExcelFunction();

        // Get the file contents and file name
        byte[] fileContents = excelData.Item1;
        string fileName = excelData.Item2;

        // Convert byte array to base64 string
        var base64File = Convert.ToBase64String(fileContents);

        // Invoke JavaScript function to download the file
        await JSRuntime.InvokeVoidAsync("downloadFile", base64File, fileName);
    }

    private Cell CreateCell(string text)
    {
        return new Cell(new InlineString(new DocumentFormat.OpenXml.Spreadsheet.Text(text)));
    }

    private async Task<ApiData> FetchDataFromApi()
    {
        // API data
        var data = employeeAfterFiltered;

        var rowDataList = new List<RowData>();

        foreach (var item in data)
        {
            rowDataList.Add(new RowData
                {
                    Values = new List<object> { item.FirstName, item.LastName, item.Department.DepartmentName, item.Address.Country }
                });
        }

        return new ApiData
            {
                Columns = new List<Column>
        {
            new Column { ColumnName = "FirstName" },
            new Column { ColumnName = "LastName" },
            new Column { ColumnName = "Department" },
            new Column { ColumnName = "Country" }
        },
                Rows = rowDataList
            };
    }

    public class ApiData
    {
        public List<Column> Columns { get; set; }
        public List<RowData> Rows { get; set; }
    }

    public class Column
    {
        public string ColumnName { get; set; }
    }

    public class RowData
    {
        public List<object> Values { get; set; }
    }

    //DocumentFormat.OpenXml.Wordprocessing.
    /// ////////////////////////////////////////////// openxml document export ///////////////////////////////////////////////////
    private async Task<byte[]> ExportToDocument()
    {
        // Call your API to fetch data
        var apiData = await FetchDataFromApi();

        // Create a memory stream to store the document file
        using (MemoryStream mem = new MemoryStream())
        {
            // Create a WordprocessingDocument
            using (WordprocessingDocument document = WordprocessingDocument.Create(mem, WordprocessingDocumentType.Document))
            {
                // Add main parts to the document
                MainDocumentPart mainPart = document.AddMainDocumentPart();
                mainPart.Document = new Document();
                Body body = mainPart.Document.AppendChild(new Body());

                // Create a table
                DocumentFormat.OpenXml.Wordprocessing.Table table = new DocumentFormat.OpenXml.Wordprocessing.Table();
                TableProperties tblProp = new TableProperties(
                    new TableBorders(
                        new DocumentFormat.OpenXml.Wordprocessing.TopBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                        new DocumentFormat.OpenXml.Wordprocessing.BottomBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                        new DocumentFormat.OpenXml.Wordprocessing.LeftBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                        new DocumentFormat.OpenXml.Wordprocessing.RightBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                        new InsideHorizontalBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 },
                        new InsideVerticalBorder { Val = new EnumValue<BorderValues>(BorderValues.Single), Size = 12 }
                    )
                );
                table.AppendChild(tblProp);

                // Add title row
                TableRow titleRow = new TableRow();
                titleRow.AppendChild(CreateTableCell("Employee Details Export", bold: true));
                table.AppendChild(titleRow);

                // Add header row
                TableRow headerRow = new TableRow();
                foreach (var column in apiData.Columns)
                {
                    var cell = CreateTableCell(column.ColumnName, bold: true);
                    cell.TableCellProperties = new TableCellProperties(new Shading() { Fill = "48cae4" }); // Light Gray
                    headerRow.AppendChild(cell);
                }
                table.AppendChild(headerRow);

                // Add data rows
                foreach (var row in apiData.Rows)
                {
                    TableRow dataRow = new TableRow();
                    foreach (var value in row.Values)
                    {
                        dataRow.AppendChild(CreateTableCell(value.ToString()));
                    }
                    table.AppendChild(dataRow);
                }

                // Append table to the document body
                body.AppendChild(table);
            }

            // Reset the memory stream position
            mem.Position = 0;

            // Return the byte array of the document content
            return mem.ToArray();
        }
    }

    private async Task DownloadDocument()
    {
        // Call the method to fetch document content from API
        byte[] documentContent = await ExportToDocument();

        // Convert byte array to base64 string
        string base64String = Convert.ToBase64String(documentContent);

        // Trigger file download using JavaScript interop
        await JSRuntime.InvokeVoidAsync("downloadDocFile", base64String, "api_data.docx");
    }

    private TableCell CreateTableCell(string text, bool bold = false)
    {
        TableCell cell = new TableCell();
        Paragraph para = new Paragraph();
        DocumentFormat.OpenXml.Wordprocessing.Run run = new DocumentFormat.OpenXml.Wordprocessing.Run(new DocumentFormat.OpenXml.Wordprocessing.Text(text));
        if (bold)
        {
            run.RunProperties = new DocumentFormat.OpenXml.Wordprocessing.RunProperties(new DocumentFormat.OpenXml.Wordprocessing.Bold());
        }
        para.Append(run);
        cell.Append(para);
        return cell;
    }

    //////////////////////////////////////////////////////////// ppt export ////////////////////////////////////////////////////////////////
    public class EmployeeAPIDataPPTModel
    {
        public List<SlideData> Slides { get; set; }
    }

    public class SlideData
    {
        public List<ShapeData> Shapes { get; set; }
    }

    public class ShapeData
    {
        public string Text { get; set; }
        // Other properties as needed for images, charts, etc.
    }

    public async Task<EmployeeAPIDataPPTModel> GetAPIDataForPPT()
    {
        var apiData = employeeAfterFiltered; // Fetch data from API

        var slides = new List<SlideData>();

        foreach (var employee in apiData)
        {
            var slide = new SlideData
                {
                    Shapes = new List<ShapeData>
            {
                new ShapeData { Text = $"Name: {employee.FirstName} {employee.LastName}" },
                new ShapeData { Text = $"Department: {employee.Department.DepartmentName}" },
                new ShapeData { Text = $"Country: {employee.Address.Country}" }
            }
                };

            slides.Add(slide);
        }

        return new EmployeeAPIDataPPTModel { Slides = slides };
    }

    private async Task ExportToPPT()
    {
        var apiData = await GetAPIDataForPPT();

        // Create a new PowerPoint presentation
        string presentationPath = "YourPresentation.pptx";
        using (PresentationDocument presentationDocument = PresentationDocument.Create(presentationPath, PresentationDocumentType.Presentation))
        {
            // Add a presentation part
            PresentationPart presentationPart = presentationDocument.AddPresentationPart();
            presentationPart.Presentation = new Presentation();

            // Add slide master part
            SlideMasterPart slideMasterPart = presentationPart.AddNewPart<SlideMasterPart>();
            slideMasterPart.SlideMaster = new SlideMaster(new CommonSlideData(new ShapeTree()));

            // Add slide layout part
            SlideLayoutPart slideLayoutPart = slideMasterPart.AddNewPart<SlideLayoutPart>("rId1");
            slideLayoutPart.SlideLayout = new SlideLayout(new CommonSlideData(new ShapeTree()));

            // Populate the presentation with API data
            int slideId = 1;
            foreach (var slideData in apiData.Slides)
            {
                SlidePart slideParts = presentationDocument.PresentationPart.AddNewPart<SlidePart>($"Slide{slideId}");
                GenerateSlideContent(slideData, slideParts);
                slideId++;
            }

            // For demonstration purposes, let's just add some sample text to the first slide
            var text = new DocumentFormat.OpenXml.Presentation.TextBody(
                    new DocumentFormat.OpenXml.Drawing.BodyProperties(),
                    new DocumentFormat.OpenXml.Drawing.Paragraph(
                    new DocumentFormat.OpenXml.Drawing.Run(
                    new DocumentFormat.OpenXml.Drawing.Text("API Data"))));
             var paragraph = new Paragraph(text);
             presentationPart.SlideParts.First().Slide.CommonSlideData.ShapeTree.Append(paragraph);

            // Save changes to the presentation
            presentationPart.Presentation.Save();
        }

        Console.WriteLine("Presentation created successfully at: " + presentationPath);
    }

    private void GenerateSlideContent(SlideData slideData, SlidePart slidePart)
    {
        foreach (var shapeData in slideData.Shapes)
        {
            // Add text box shape to the slide with shapeData.Text content
            AddTextShape(slidePart, shapeData.Text);
        }
    }

    private void AddTextShape(SlidePart slidePart, string text)
    {
        // Create a new text box shape
        Shape shape = new Shape(
            new NonVisualShapeProperties(
                new NonVisualDrawingProperties { Id = 1, Name = "TextBox" },
                new NonVisualShapeDrawingProperties(new DocumentFormat.OpenXml.Drawing.ShapeLocks { NoGrouping = true }),
                new ApplicationNonVisualDrawingProperties()),
            new ShapeProperties(),
            new TextBody(
                new DocumentFormat.OpenXml.Drawing.BodyProperties(),
                new DocumentFormat.OpenXml.Drawing.Paragraph(
                    new DocumentFormat.OpenXml.Drawing.Run(
                        new DocumentFormat.OpenXml.Drawing.Text { Text = text }))));

        // Append the shape to the slide
        slidePart.Slide.CommonSlideData.ShapeTree.Append(shape);
    }

    // using closedxml
    // private async Task Export()
    // {
    //     try
    //     {
    //         DataTable dt = new DataTable();
    //         dt.Columns.Add("FirstName", typeof(string));
    //         dt.Columns.Add("LastName", typeof(string));
    //         dt.Columns.Add("Department", typeof(string));
    //         dt.Columns.Add("Country", typeof(string));

    //         var data = employeeAfterFiltered;
    //         if (data != null && data.Count > 0)
    //         {
    //             data.ForEach(item =>
    //             {
    //                 dt.Rows.Add(item.FirstName, item.LastName, item.Department.DepartmentName, item.Address.Country);
    //             });
    //         }

    //         using (XLWorkbook wb = new XLWorkbook())
    //         {
    //             wb.Worksheets.Add(dt, "Details");
    //             using (MemoryStream stream = new MemoryStream())
    //             {
    //                 wb.SaveAs(stream);
    //                 var byteArray = stream.ToArray();

    //                 await JSRuntime.InvokeAsync<object>("BlazorDownloadFile", "sample.xlsx", Convert.ToBase64String(byteArray));
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"An error occurred: {ex.Message}");
    //     }
}

