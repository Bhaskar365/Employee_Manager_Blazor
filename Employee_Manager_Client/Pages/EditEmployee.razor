@page "/edit/{Id}"
@using Employee_Manager_Client.Services
@using Employee_Manager_Models

@inject ApiService apiService;

<div class="container">
    <h3>Edit Employee</h3>
    <hr />

    <EditForm Model="@employeeModel" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Employee Details Section -->

        <div class="mb-3">
            <label for="FirstName" class="form-label">First Name</label>
            <InputText id="FirstName" @bind-Value="employeeModel.FirstName" class="form-control" />
            <ValidationMessage For="() => employeeModel.FirstName" />
        </div>

        <div class="mb-3">
            <label for="LastName" class="form-label">Last Name</label>
            <InputText id="LastName" @bind-Value="employeeModel.LastName" class="form-control" />
            <ValidationMessage For="() => employeeModel.LastName" />
        </div>

        <div class="mb-3">
            <label for="Email" class="form-label">Email</label>
            <InputText id="Email" @bind-Value="employeeModel.Email" class="form-control" />
            <ValidationMessage For="() => employeeModel.Email" />
        </div>

        <div class="mb-3">
            <label for="Gender" class="form-label">Gender</label>
            <InputSelect id="Gender" @bind-Value="employeeModel.Gender" class="form-control">
                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                {
                    <option value="@gender">@gender</option>
                }
            </InputSelect>
            <ValidationMessage For="() => employeeModel.Gender" />
        </div>

        <div class="mb-3">
            <label for="DOB" class="form-label">Date of Birth</label>
            <InputDate id="DOB" @bind-Value="employeeModel.DOB" class="form-control" />
            <ValidationMessage For="() => employeeModel.DOB" />
        </div>

        <!-- Address Details Section -->
            <div class="mb-3">
                <label for="Street" class="form-label">Street</label>
                <InputText id="Street" @bind-Value="employeeModel.Address.Street" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="State" class="form-label">State</label>
                <InputText id="State" @bind-Value="employeeModel.Address.State" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Country" class="form-label">Country</label>
                <InputText id="Country" @bind-Value="employeeModel.Address.Country" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="ZipCode" class="form-label">Zip Code</label>
                <InputText id="ZipCode" @bind-Value="employeeModel.Address.ZipCode" class="form-control" />
            </div> 
   
        <!-- Department Details Section -->
       <div class="mb-3">
            <label for="DepartmentId" class="form-label">Department</label>
            <InputSelect id="DepartmentId" @bind-Value="employeeModel.DepartmentId" class="form-control">
                @foreach (var dep in department)
                {
                    <option value="@dep.DepartmentId">@dep.DepartmentName</option>
                }
            </InputSelect>
        </div> 

        <!-- Joining Date Section -->
        <div class="mb-3">
            <label for="JoiningDate" class="form-label">Joining Date</label>
            <InputDate id="JoiningDate" @bind-Value="employeeModel.JoiningDate" class="form-control" />
            <ValidationMessage For="() => employeeModel.JoiningDate" />
        </div>

        <!-- Submit Button -->
        <div class="mb-3">
            <button type="submit"
                    class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                Submit
            </button>
        </div>
    </EditForm>
</div>


@code {

    [Parameter]
    public string Id { get; set; }

    public Employee employeeModel = new Employee();
    public List<Department> department = new List<Department>();
    public Address address = new Address();

    protected override async Task OnInitializedAsync()
    {
        employeeModel = await apiService.GetEmployeeById(int.Parse(Id));
        department = await apiService.GetAllDepartments();
        var addressId = employeeModel.AddressId;
        if (addressId != null)
        {
            address = await apiService.GetAddressById(addressId);
            employeeModel.Address = address; // Assign the fetched address to employeeModel
        }
    }

    [CascadingParameter]
    public EventCallback notify { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    public void SubmitForm()
    {
      
    }
}
