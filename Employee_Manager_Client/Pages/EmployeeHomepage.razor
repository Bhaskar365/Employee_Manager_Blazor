@page "/";
@using Employee_Manager_Client.Services
@using Employee_Manager_Models

@inject ApiService apiService;
@inject HttpClient http;
@inject NavigationManager navigationManager;

<h3 class="mt-2" id="employeeHeader">Employee Details</h3>

<hr/>

<a href="/employee/add" class="btn btn-primary" role="button" id="addBtn">
    <i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Add Employee
</a>

@if (isLoading)
{
    <div class="lds-default"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
}
else
{
    <div id="searchBox" >
        Search <input />
    </div>

@if (showNoDataMessage)
{
    <p id="noData">No data available....</p>
}

else
{
  
}
<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Do you wish to delete employee <strong>@Name</strong> with ID : <strong>@DevId</strong> ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="(()=>Delete())">Delete</button>
            </div>
        </div>
    </div>
</div>
}



@code {
    public bool Show = false;

    public int DevId;

    public string Name;

    private List<Employee> employees = new List<Employee>();
    private bool showNoDataMessage = false;
    private bool isLoading = true;

    private string responseMessage;
    private string productCode;

    protected override async Task OnInitializedAsync()
    {
        employees = await apiService.GetEmployees();
        showNoDataMessage = employees == null || employees.Count == 0;
        isLoading = false;
    }

    private void showDeleteAlert(int Id, string name)
    {
        DevId = Id;
        Show = true;
        Name = name;
    }

    private async void Delete()
    {

        await apiService.DeleteEmp(DevId);

        employees.RemoveAll(e => e.EmpId == DevId);

        StateHasChanged();

        navigationManager.NavigateTo("/", forceLoad: true);
    }

    private void GoToEditPage(int id)
    {

        DevId = id;
        navigationManager.NavigateTo($"/user/{DevId}");
    }


}