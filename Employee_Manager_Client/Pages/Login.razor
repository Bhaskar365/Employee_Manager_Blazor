@page "/login";
@using Employee_Manager_Client.Services
@using Employee_Manager_Models.CustomModels
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ApiService apiService;
@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;

<style>
    .loginBox {
        width: 100%;
        text-align: center;
        margin: 20px 0px 20px 0px;
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    }

    p {
        font-size: 12px;
        text-decoration: none;
        color: #ffffff;
    }

    h1 {
        font-size: 1.5em;
        color: #525252;
    }

    .box {
        background: white;
        width: 300px;
        border-radius: 6px;
        margin: 0 auto 0 auto;
        padding: 0px 0px 10px 0px;
        border: 4px solid #2877e9;
    }

    .email {
        background: #ffffff;
        border: 1px solid #ccc;
        border-bottom: 1px solid #ccc;
        padding: 8px;
        width: 250px;
        color: #525252;
        margin-top: 10px;
        font-size: 1em;
        border-radius: 4px;
    }

    .password {
        border-radius: 4px;
        background: #ecf0f1;
        border: 1px solid #ccc;
        padding: 8px;
        width: 250px;
        font-size: 1em;
    }

</style>

@* <div style="min-height:400px;">

    <div class="loginBox">
        <div class="box">
            <br />
            <h1>Admin Panel</h1>
            @if (loginModel != null)
            {
                <EditForm Model="@loginModel" OnValidSubmit="Login_Click">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <InputText type="email" class="form-control"
                                   placeholder="Email" @bind-Value="loginModel.Email"></InputText>
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <InputText type="password" class="form-control"
                                   placeholder="Password" @bind-Value="loginModel.Password"></InputText>
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <br /><br />

                    <input type="submit" class="btn-primary" value="Login" />
                </EditForm>
            }
        </div>
        <div>
            <br />
            <br />
            @if (IsSuccessful)
            {
                <div class="alert alert-success" role="alert">@message</div>
            }
            @if (IsUnsuccessful)
            {
                <div class="alert alert-danger" role="alert">@message</div>
            }
        </div>
    </div>
</div> *@

<div class="formBox">
    <div class="formContainer">
        <div class="form-inputBoxes">
            <br />
            <h1>Admin Panel</h1>
            <div>
                @if (IsSuccessful)
                {
                    <div class="alert alert-success" role="alert">@message</div>
                }
                @if (IsUnsuccessful)
                {
                    <div class="alert alert-danger" role="alert">@message</div>
                }
            </div>
            @if (loginModel != null)
            {
                <EditForm Model="@loginModel" OnValidSubmit="Login_Click">

                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <InputText type="email" class="form-control mb-3"
                                   id="exampleInputEmail1" aria-describedby="emailHelp" 
                                   placeholder="Email" @bind-Value="loginModel.Email">
                        </InputText>
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <InputText type="password" class="form-control mb-3"
                                   id="exampleInputPassword1" placeholder="Password" @bind-Value="loginModel.Password">
                        </InputText>
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Login</button>

                    <br/>
                    
                    <span class="align-content-center">Don't have a account ? <a href="#">Regiser</a></span>
                </EditForm>
            }
        </div>
     
    </div>
</div>

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public bool IsSuccessful { get; set; } = false;
    public bool IsUnsuccessful { get; set; } = false;

    public LoginModel? loginModel { get; set; }
    public string? message { get; set; }

    protected override Task OnInitializedAsync()
    {
        loginModel = new LoginModel();
        return base.OnInitializedAsync();
    }

    private async Task Login_Click()
    {
        var response = await apiService.Login(loginModel);
        if (response.Status == true)
        {
            IsSuccessful = true;
            IsUnsuccessful = false;
            var user_response = response.Message.Split("|");
            await sessionStorage.SetAsync("adminKey", user_response[0]);
            await sessionStorage.SetAsync("adminName", user_response[1]);
            await sessionStorage.SetAsync("adminEmail", user_response[2]);

            message = "Login Successful";

            await notify.InvokeAsync();
            Thread.Sleep(3000);
            navManager.NavigateTo("/");
        }
        else
        {
            IsSuccessful = false;
            IsUnsuccessful = true;
            message = response.Message;
            
        }
    }
}
