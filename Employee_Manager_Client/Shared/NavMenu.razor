@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Employee_Manager_Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="employee/add" Match="NavLinkMatch.All">
                <span class="oi oi-plus" aria-hidden="true"></span> Add
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" @onclick="NotifyLayout" Match="NavLinkMatch.All">
                <span class="oi oi-lock-locked" aria-hidden="true"></span> Log Out
            </NavLink>
        </div>

    </nav>
</div>

@code {

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [CascadingParameter]
    public EventCallback notify { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();  
        }
    }

    protected override Task OnInitializedAsync()
    {
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    public async Task NotifyLayout()
    {
        var session = await sessionStorage.GetAsync<string>("adminKey");
        if(session.Success)
        {
            await Logout();
        }
    }

    public async Task Logout()
    {
        await sessionStorage.DeleteAsync("adminKey");
        await sessionStorage.DeleteAsync("adminName");
        await sessionStorage.DeleteAsync("adminEmail");
        await OnInitializedAsync();
        navManager.NavigateTo("/login");
    }
}
